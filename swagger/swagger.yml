swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /games/:
    get:
      tags:
      - games
      description: Get all games
      operationId: GamesController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/mymongo.Game'
        "403":
          description: :gameId is empty
    post:
      tags:
      - games
      description: Create new game
      operationId: GamesController.Create
      parameters:
      - in: body
        name: body
        description: The games content
        required: true
        schema:
          $ref: '#/definitions/mymongo.Game'
      responses:
        "201":
          description: '{string} mymongo.Game.GameId'
        "409":
          description: game already exists
  /games/{gameId}:
    get:
      tags:
      - games
      description: Find games by gameId
      operationId: GamesController.Get
      parameters:
      - in: path
        name: gameId
        description: the gameId you want to get
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/mymongo.Game'
        "403":
          description: :gameId is empty
        "404":
          description: :game does not exist
    put:
      tags:
      - games
      description: Update game
      operationId: GamesController.Update
      parameters:
      - in: path
        name: gameId
        description: The gameId you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/mymongo.Game'
      responses:
        "201":
          description: ""
          schema:
            $ref: '#/definitions/mymongo.Game'
        "403":
          description: :gameId is empty
        "404":
          description: ':mongo: no documents in result'
    delete:
      tags:
      - games
      description: Delete game
      operationId: GamesController.Delete
      parameters:
      - in: path
        name: gameId
        description: The gameId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: gameId is empty
  /user/:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /user/{uid}:
    get:
      tags:
      - user
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is empty
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is not int
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /user/login:
    get:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
definitions:
  models.Profile:
    title: Profile
    type: object
    properties:
      Address:
        type: string
      Age:
        type: integer
        format: int64
      Email:
        type: string
      Gender:
        type: string
  models.User:
    title: User
    type: object
    properties:
      Id:
        type: string
      Password:
        type: string
      Profile:
        $ref: '#/definitions/models.Profile'
      Username:
        type: string
  mymongo.Game:
    title: Game
    type: object
    properties:
      created_on:
        type: string
        format: datetime
      game_id:
        type: string
      genres:
        type: array
        items:
          type: string
      metadata:
        $ref: '#/definitions/mymongo.MetaData'
      release_date:
        type: string
        format: datetime
      updated_on:
        type: string
        format: datetime
  mymongo.MetaData:
    title: MetaData
    type: object
    properties:
      player_count:
        type: integer
        format: int64
      server_status:
        type: boolean
      updated:
        type: boolean
tags:
- name: games
  description: |
    Operations about games
- name: user
  description: |
    Operations about Users
